// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios15.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name WeavrComponents
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import ApproovURLSession
import CryptoKit
import DeveloperToolsSupport
import Foundation
import IdensicMobileSDK
import LocalAuthentication
import PDFKit
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol SecurePasscodeFieldStackDelegate : AnyObject {
  func onFocusChange(index: Swift.Int, focused: Swift.Bool)
  func onTextEntryComplete()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecurePasscodeFieldStack : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any WeavrComponents.SecurePasscodeFieldStackDelegate)?
  @_Concurrency.MainActor @preconcurrency public var placeholder: Swift.Character?
  @_Concurrency.MainActor @preconcurrency public var font: UIKit.UIFont?
  @_Concurrency.MainActor @preconcurrency public var internalSpacing: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency public var enableBorder: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var borderRadius: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency public var borderWidth: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency public var inactiveFieldBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var activeFieldBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var fieldBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var textColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func show()
  @_Concurrency.MainActor @preconcurrency public func createToken(callBack: @escaping (WeavrComponents.WeavrResult<[Swift.String : Swift.String?], WeavrComponents.ErrorResponse>) -> Swift.Void)
  @objc deinit
}
extension WeavrComponents.SecurePasscodeFieldStack : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SecurePasscodeFactory {
  public static func createView(isSegmented: Swift.Bool) -> UIKit.UIView
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TrackOperationResolveBlock {
  public func onProcessCompleted(addingExtraData data: [Swift.String : Any] = [:], completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void = { _ in })
  public func onProcessFailed(addingExtraData data: [Swift.String : Any] = [:], completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void = { _ in })
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static var identifier: Swift.String
}
public struct Event {
  public let eventName: Swift.String
  public let category: Swift.String
  public let timestamp: Foundation.Date
  public let extraData: [Swift.String : Any]
  public let operationState: Swift.String?
  public let operationId: Swift.String?
  public init(category: Swift.String, eventName: Swift.String, extraData: [Swift.String : Any] = [:], operationState: Swift.String? = nil, operationId: Swift.String? = nil, timestamp: Foundation.Date = Date())
}
public enum Analytics {
  public protocol Tracker {
    func trackEvent(event: WeavrComponents.Event, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  }
  public static func trackEvent(event: WeavrComponents.Event, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? = nil)
  public static func trackOperation(category: Swift.String, operationName: Swift.String, userId: Swift.String? = nil, extraData: [Swift.String : Any]? = nil, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void = { _ in }) -> WeavrComponents.TrackOperationResolveBlock
}
@_hasMissingDesignatedInitializers final public class KYCWrapper {
  final public func startKyc(vc: UIKit.UIViewController, reference: Swift.String, token: Swift.String? = nil, mailAddress: Swift.String? = nil, phone: Swift.String? = nil, locale: Swift.String, theme: WeavrComponents.WeavrKYCTheme? = nil, kycHandlers: ((WeavrComponents.WeavrKYCHandlers) -> Swift.Void)?, weavrExceptionHandlers: ((WeavrComponents.WeavrExceptionHandlers) -> Swift.Void)?, kycListeners: ((WeavrComponents.WeavrKYCListeners) -> Swift.Void)?)
  final public func setAnalyticsEnabled(isEnabled: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecureCVVLabel : WeavrComponents.SecureLabel {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func setTokeniseText(toDetokenise: Swift.String, callback: ((WeavrComponents.WeavrResult<Swift.String?, WeavrComponents.ErrorResponse>) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecurePasswordField : WeavrComponents.SecureTextField {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct BrandingResponse : Swift.Codable {
  public let textColor: Swift.String?
  public let confirmButtonColor: Swift.String?
  public let declineButtonColor: Swift.String?
  public let backgroundColor: Swift.String?
  public let fontFaceFamily: Swift.String?
  public let confirmTextColor: Swift.String?
  public let declineTextColor: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@frozen public enum WeavrResult<Success, Failure> {
  case success(Success)
  case failure(Failure)
}
public protocol Biometrics {
  func initialize(psaEnv: WeavrComponents.PsaENV)
  func updateDeviceToken(fcmToken: Swift.String) async -> Swift.Result<Swift.Bool, WeavrComponents.ErrorResponse>
  func checkIsReadyForEnrollment() -> Swift.Bool
  func checkReadyForAuth() -> Swift.Bool
  func isEnrolled() -> Swift.Bool
  func startChallenge(userInfo: [Swift.AnyHashable : Any], completion: @escaping (Swift.Bool, WeavrComponents.WeavrPSASharedStatus, WeavrComponents.WeavrChallengeType) -> Swift.Void)
  func startEnrollment(vc: UIKit.UIViewController, token: Swift.String, completion: @escaping (WeavrComponents.WeavrResult<Swift.String?, WeavrComponents.ErrorResponse>) -> Swift.Void)
  func startBiometricPSALogin(completion: @escaping (WeavrComponents.WeavrResult<WeavrComponents.WeavrSecureLoginData, WeavrComponents.ErrorResponse>) -> Swift.Void)
  func startBiometricPSALogin(completion: @escaping (WeavrComponents.WeavrResult<WeavrComponents.WeavrSecureLoginData, WeavrComponents.ErrorResponse>) -> Swift.Void, onForgotPasscode: (() -> Swift.Void)?)
  @available(*, deprecated, renamed: "updateDeviceToken(fcmToken:)", message: "Use updateDeviceToken(fcmToken:) async instead as it provides you with a result")
  func updateDeviceToken(deviceToken: Swift.String)
  @available(*, deprecated, renamed: "isEnrolled", message: "Use isEnrolled instead")
  func checkDeviceIsEnrolled()
  @available(*, deprecated, renamed: "isEnrolled", message: "Use isEnrolled instead")
  func checkDeviceIsEnrolled(completion: @escaping (WeavrComponents.WeavrResult<Swift.Bool, WeavrComponents.ErrorResponse>) -> Swift.Void)
}
public enum PsaENV {
  case PRODUCTION
  case SANDBOX
  public static func == (a: WeavrComponents.PsaENV, b: WeavrComponents.PsaENV) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol UXComponetGroupProtocol {
  func createToken(fieldKeys: [Swift.String], callBack: @escaping (WeavrComponents.WeavrResult<[Swift.String : Swift.String?], WeavrComponents.ErrorResponse>) -> Swift.Void)
  func match() -> Swift.Bool
  func addComponents(components: [WeavrComponents.SecureTextField])
  func removeComponents(components: [WeavrComponents.SecureTextField])
}
@_hasMissingDesignatedInitializers public class UXComponetGroup : WeavrComponents.UXComponetGroupProtocol {
  public var data: [Swift.String] {
    get
  }
  public var components: [WeavrComponents.SecureTextField] {
    get
  }
  public func addComponents(components: [WeavrComponents.SecureTextField])
  public func removeComponents(components: [WeavrComponents.SecureTextField])
  public func createToken(fieldKeys: [Swift.String], callBack: @escaping (WeavrComponents.WeavrResult<[Swift.String : Swift.String?], WeavrComponents.ErrorResponse>) -> Swift.Void)
  public func match() -> Swift.Bool
  @objc deinit
}
public struct UXComponentsStatus {
  public let fixedPasscodeLength: Swift.Bool
  public let userNeedsRelogin: Swift.Bool
}
@_hasMissingDesignatedInitializers final public class UXComponents {
  public static let kyc: WeavrComponents.KYCWrapper
  public static let psa: any WeavrComponents.Biometrics
  public static var version: Swift.String {
    get
  }
  @available(*, deprecated, message: "Please use initialize(environment: ENV, uiKey: String, completion: ((Result<UXComponentsStatus, ErrorResponse>) -> Void)) instead")
  public static func initialize(env: WeavrComponents.ENV, uiKey: Swift.String, completion: ((Swift.String) -> Swift.Void)? = nil)
  public static func initialize(environment env: WeavrComponents.ENV, uiKey: Swift.String, completion: @escaping (Swift.Result<WeavrComponents.UXComponentsStatus, WeavrComponents.ErrorResponse>) -> Swift.Void)
  public static func clearUXComponentsCache()
  public static func setUserToken(token: Swift.String, completion: @escaping (WeavrComponents.WeavrResult<Swift.String, WeavrComponents.ErrorResponse>) -> Swift.Void)
  public static func createGroup(components: [WeavrComponents.SecureTextField]) -> WeavrComponents.UXComponetGroup
  public static func isAssociated() -> Swift.Bool
  public static func resetAssociation() -> Swift.Bool
  public static func setAppCheckToken(_ token: Swift.String) -> Swift.Bool
  public static func getDeviceFingerprint() -> Swift.String?
  @objc deinit
}
@frozen public enum WeavrKYCHandlers {
  case tokenExpirationHandler((Swift.String) -> Swift.Void)
  case verificationHandler(Swift.Bool)
  case dismissHandler(IdensicMobileSDK.SNSMobileSDK, UIKit.UIViewController)
}
@frozen public enum WeavrExceptionHandlers {
  case weavrApiExceptionHandler(Swift.String)
}
@frozen public enum WeavrKYCListeners {
  case onStatusDidChange(IdensicMobileSDK.SNSMobileSDK, IdensicMobileSDK.SNSMobileSDK.Status)
  case onEvent(IdensicMobileSDK.SNSMobileSDK, IdensicMobileSDK.SNSEvent)
  case onDidDismiss(IdensicMobileSDK.SNSMobileSDK)
}
@frozen public enum WeavrKYCStatus {
  case ready
  case failed(description: Swift.String, failReason: IdensicMobileSDK.SNSFailReason, verboseStatus: Swift.String)
  case initial
  case incomplete
  case pending
  case temporarilyDeclined
  case finallyRejected
  case approved
  case actionCompleted
}
@frozen public enum KYCFailReason {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecureCardPinLabel : WeavrComponents.SecureLabel {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func setTokeniseText(toDetokenise: Swift.String, callback: ((WeavrComponents.WeavrResult<Swift.String?, WeavrComponents.ErrorResponse>) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol TextEntryCompleteDelegate : AnyObject {
  func onTextEntryComplete(_ textField: WeavrComponents.SecureTextField)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecureTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency weak public var textEntryCompleteDelegate: (any WeavrComponents.TextEntryCompleteDelegate)?
  @_Concurrency.MainActor @preconcurrency public var uiKey: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func textRange(from _: UIKit.UITextPosition, to _: UIKit.UITextPosition) -> UIKit.UITextRange?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func text(in _: UIKit.UITextRange) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func createToken(callBack: @escaping (WeavrComponents.WeavrResult<[Swift.String : Swift.String?], WeavrComponents.ErrorResponse>) -> Swift.Void)
  @objc deinit
}
extension WeavrComponents.SecureTextField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension WeavrComponents.SecureTextField {
  @_Concurrency.MainActor @preconcurrency public func addDoneButtonOnKeyboard()
}
public enum WeavrChallengeType : Swift.Equatable {
  case undefinedType
  case paymentInitiation
  case accountInformation
  case threeDSInitiation
  case beneficiaryManagement
  case unknown(Swift.String)
  public func statusMessage() -> Swift.String
  public static func == (a: WeavrComponents.WeavrChallengeType, b: WeavrComponents.WeavrChallengeType) -> Swift.Bool
}
public enum ENV {
  case PRODUCTION
  case SANDBOX
  public static func == (a: WeavrComponents.ENV, b: WeavrComponents.ENV) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AppConstants {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecureCardNumberLabel : WeavrComponents.SecureLabel {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var isVertical: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func setTokeniseText(toDetokenise: Swift.String, callback: ((WeavrComponents.WeavrResult<Swift.String?, WeavrComponents.ErrorResponse>) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecureLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func enableCopyTextToClipboardOnClick(enabled: Swift.Bool, completion: ((_ message: Swift.String) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func enableCopyTextToClipboardOnLongClick(enabled: Swift.Bool, completion: ((_ message: Swift.String) -> Swift.Void)?)
  @objc deinit
}
public enum TokenType : Swift.Codable, Swift.Equatable {
  case auth
  case access
  case other(type: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: WeavrComponents.TokenType, b: WeavrComponents.TokenType) -> Swift.Bool
}
public struct WeavrSecureLoginData {
  public let token: Swift.String
  public let tokenType: WeavrComponents.TokenType
}
@objc @_inheritsConvenienceInitializers open class WeavrKYCTheme : IdensicMobileSDK.SNSTheme {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecurePasscodeField : WeavrComponents.SecureTextField {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func deleteBackward()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum WeavrPSASharedStatus : Swift.Int {
  case SensitiveDataDecryptionError
  case HasActiveSession
  case NoAPNSToken
  case NotEnrolled
  case InternalLogicError
  case InternalCommonError
  case ExpiredTransaction
  case TimeOutError
  case NoInternetError
  case Undefined
  case Success
  case InvalidUserInfo
  case InvalidSessionID
  case InvalidChallengeStatus
  case Declined
  case InvalidExternalSessionID
  case InvalidClientServerUrl
  case InvalidUserExternalID
  case InvalidTenantId
  case InvalidDisableMultipleRetry
  case InvalidPinFallback
  case UserCanceled
  case NonceSigningFailed
  case EncryptionError
  case SCAChallengeFailed
  case ServiceError
  case PresentationError
  public func statusMessage() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecureCardPinField : WeavrComponents.SecureTextField {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct ErrorResponse : Swift.Codable, Swift.Error {
  public let code: Swift.Int?
  public let message: Swift.String?
  public let body: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum WeavrErrorCode : Swift.Int {
  case cantSetUIKey
  case cantSetSecureFieldsLength
  case cantRecreateKeyPairs
  case cantEnableSecurityService
  case cantRetrieveSecurityServiceKey
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class WeavrBiometric {
  @objc deinit
}
extension WeavrComponents.PsaENV : Swift.Equatable {}
extension WeavrComponents.PsaENV : Swift.Hashable {}
extension WeavrComponents.WeavrExceptionHandlers : Swift.Sendable {}
extension WeavrComponents.WeavrKYCStatus : Swift.Sendable {}
extension WeavrComponents.KYCFailReason : Swift.Sendable {}
extension WeavrComponents.KYCFailReason : Swift.BitwiseCopyable {}
extension WeavrComponents.ENV : Swift.Equatable {}
extension WeavrComponents.ENV : Swift.Hashable {}
extension WeavrComponents.WeavrPSASharedStatus : Swift.Equatable {}
extension WeavrComponents.WeavrPSASharedStatus : Swift.Hashable {}
extension WeavrComponents.WeavrPSASharedStatus : Swift.RawRepresentable {}
extension WeavrComponents.WeavrErrorCode : Swift.Equatable {}
extension WeavrComponents.WeavrErrorCode : Swift.Hashable {}
extension WeavrComponents.WeavrErrorCode : Swift.RawRepresentable {}
